/*
 * Generated _math.scss
 * <%= conf.get('themeDir') %>
 * Jan Willem Henckel
 * 
 * Math functions
 */

@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}


// **************************
// Basic calcus as functions ;)
// **************************

@function round-dp($n, $decimal-places: 1) {
    $factor: pow(10, $decimal-places);
    @return round($n * $factor) / $factor;
}

@function multiply($multiplicand, $multiplier) {
    @return $multiplicand * $multiplier;
}

@function multiply-approx($multiplicand, $multiplier) {
    @return round-dp($multiplicand * $multiplier);
}

@function divide($dividend, $divisor) {
    @return $dividend / $divisor;
}

@function divide-approx($dividend, $divisor) {
    @return round-dp($dividend / $divisor);
}

@function add($augend, $addend) {
    @return $augend + $addend;
}

@function subtract($minuend, $subtrahend) {
    @return $minuend - $subtrahend;
}

@function sum($summands...) {
	$sum: 0;
	@each $summand in $summands {
		$sum: $sum + $summand;
	}
	@return $sum;
}

@function product($multiplicands...) {
	$product: 0;
	@each $multiplicand in $multiplicands {
		$product: $product * $multiplicand;
	}
	@return $product;
}

///////////////////////////////////////////////////////////
// Plain SASS Trigonometry Algorithm in Taylor Expansion //
//                                                       //
// Based on                                              //
//      http://japborst.net/posts/sass-sines-and-cosines //
///////////////////////////////////////////////////////////
 
$pi: 3.14159265359;
$_precision: 10;
 
@function pow($base, $exp) {
  $value: $base;
  @if $exp > 1 {
    @for $i from 2 through $exp {
      $value: $value * $base;
    }
  }
  @if $exp < 1{
    @for $i from 0 through -$exp {
      $value: $value / $base;
    }
  }
  @return $value;
}
 
@function fact($num) {
  $fact: 1;
  @if $num > 0{
    @for $i from 1 through $num {
      $fact: $fact * $i;
    }
  }
  @return $fact;
}
 
@function _to_unitless_rad($angle) {
  @if unit($angle) == "deg" {
    $angle: $angle / 180deg * $pi;
  }
  @if unit($angle) == "rad" {
    $angle: $angle / 1rad;
  }
  @return $angle;
}
 
@function sin($angle){
  $a: _to_unitless_rad($angle);
  $sin: $a;
  @for $n from 1 through $_precision {
    $sin: $sin + (pow(-1, $n) / fact(2 * $n + 1) ) * pow($a, (2 * $n + 1));
  }
  @return $sin;
}
 
@function cos($angle){
  $a: _to_unitless_rad($angle);
  $cos: 1;
  @for $n from 1 through $_precision {
    $cos: $cos + ( pow(-1,$n) / fact(2*$n) ) * pow($a,2*$n);
  }
  @return $cos;
}
 
@function tan($angle){
  @return sin($angle) / cos($angle);
}